name: CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  configure:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4.2.2

      # Install Nix
      - uses: DeterminateSystems/nix-installer-action@v17
        with:
          diagnostic-endpoint: false

      # Cache and restore Nix build results with FlakeHub
      - uses: DeterminateSystems/flakehub-cache-action@v9

      # Install Omnix
      - name: Install Omnix
        run: nix --accept-flake-config profile install "github:juspay/omnix"

      # Generate matrix for multiple systems
      - id: set-matrix
        run: |
          set -euxo pipefail
          MATRIX="$(om ci gh-matrix --systems=x86_64-linux | jq -c .)"
          echo "matrix=$MATRIX" >> "$GITHUB_OUTPUT"

  nix:
    runs-on: ubuntu-latest
    needs: configure
    strategy:
      matrix: ${{ fromJson(needs.configure.outputs.matrix) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4.2.2

      # Install Nix
      - uses: DeterminateSystems/nix-installer-action@v17
        with:
          diagnostic-endpoint: false

      # Cache and restore Nix build results with FlakeHub
      - uses: DeterminateSystems/flakehub-cache-action@v9

      # Install Omnix
      - name: Install Omnix
        run: nix --accept-flake-config profile install "github:juspay/omnix"

      # Run comprehensive CI with Omnix for specific system
      - name: Run Omnix CI
        run: om ci run --systems "${{ matrix.system }}" ".#default.${{ matrix.subflake }}"

      # Smoke test: run script against `tests/smoke.cook`
      - name: Run smoke test
        run: |
          nix run . -- tests
          echo "Generated phrases.json:"
          jq . phrases.json
          test "$(jq 'keys | length' phrases.json)" -gt 0